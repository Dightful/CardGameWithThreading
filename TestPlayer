package org.example;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import org.mockito.Mockito;

import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

class TestPlayer {

    private Player player;           // The Player instance to test
    private CardDeck leftDeck;       // The left deck the player interacts with
    private CardDeck rightDeck;      // The right deck the player interacts with
    private List<Card> initialCards; // Cards to initialise the player's hand
    public Card cardToDiscard = new Card(1);
    private CardGame cardgame;
    private Player player2;           // The Player2 instance to test
    private List<Card> initialCards2;

    @BeforeEach
    void setUp() throws IOException {
        // Initialise the decks
        leftDeck = new CardDeck();
        rightDeck = new CardDeck();
        cardgame = new CardGame(2, "src/main/resources/pack.txt");

        // Initialise the player's hand with some cards
        initialCards = new ArrayList<>();
        initialCards.add(cardToDiscard);
        initialCards.add(new Card(2));
        initialCards.add(new Card(3));
        initialCards.add(new Card(4));

        // Create the player
        player = new Player(1, leftDeck, rightDeck);
        player.setMain(cardgame);

        // Add the initial cards to the player's hand
        initialCards.forEach(player::addInitialCards);
    }

    @Test
    void testPlayerInitialization() {
        // Test that the player's ID is correctly set
        assertEquals(1, player.getPlayerId());

        // Test that the player's hand is correctly initialised
        assertEquals(4, player.getHand().size());
        assertEquals(initialCards, player.getHand());
    }

    @Test
    void testLogAction() throws IOException {
        // Define mock or actual parameter values
        int playerId = 1;  // Example player ID
        int cardValue = 5; // Example card value, this should be dynamically retrieved based on logic
        int deckNumber = 2; // Example deck number

        // Construct the expected message based on the game's requirements
        String expectedMessage = "player" + playerId + " discards a " + cardValue + " to deck" + deckNumber;

        // Use a temporary file for output (optional but recommended to avoid hard-coded paths)
        String fileName = "player" + playerId + "_output.txt";

        // Clear the file before test, if necessary
        try (FileWriter writer = new FileWriter(fileName, false)) {
            // This clears the file for testing purpose
        }

        // Call the method that should log the action
        player.logAction(expectedMessage);

        // Read the content from the file
        List<String> lines = java.nio.file.Files.readAllLines(java.nio.file.Paths.get(fileName));

        // Assert that the expected message is the last line of the file
        assertFalse(lines.isEmpty(), "Log file should not be empty");
    }

    @Test
    void testStopRunning() throws IOException {
        int winnerId = 2; // Assume player 2 wins
        int numPlayers = 4; // Total number of players
        player.clearHand();
        player.addInitialCards(new Card(5));
        player.addInitialCards(new Card(6));
        player.addInitialCards(new Card(7));
        player.addInitialCards(new Card(8));

        // Remove any existing content from the player's output file
        try (FileWriter writer = new FileWriter("player1_output.txt", false)) {
            // Clear content
        }

        // Player is notified of another player's win
        player.stopRunning(winnerId, numPlayers);

        // Verify: Check log file contents
        List<String> lines = java.nio.file.Files.readAllLines(java.nio.file.Paths.get("player1_output.txt"));
        assertTrue(lines.contains("player " + winnerId + " has informed player " + player.getPlayerId() + " that player " + winnerId + " has won"));
        assertTrue(lines.contains("player " + player.getPlayerId() + " exits"));
        assertTrue(lines.contains("player " + player.getPlayerId() + " final hand: [" + new Card(5) + ", " + new Card(6) + ", " + new Card(7) + ", " + new Card(8) + "]"));
    }

    @Test
    void testDeclareWin() throws IOException {
        // Update the player's hand to a winning hand
        player.clearHand();
        player.addInitialCards(new Card(2));
        player.addInitialCards(new Card(2));
        player.addInitialCards(new Card(2));
        player.addInitialCards(new Card(2));

        // Validate the hand is a winning hand
        assertTrue(player.hasWinningHand());

        // Create a mock of CardGame to verify interactions
        CardGame mockCardGame = Mockito.mock(CardGame.class);
        player.setMain(mockCardGame);

        // Clear the file before test
        try (FileWriter writer = new FileWriter("player1_output.txt", false)) {
            // Clear content
        }

        // Player declares win
        player.declareWin();

        // Check if the notifyAllPlayers method was called
        Mockito.verify(mockCardGame).notifyAllPlayers(player.getPlayerId());

        // Check log file contents
        List<String> lines = java.nio.file.Files.readAllLines(java.nio.file.Paths.get("player1_output.txt"));
        assertTrue(lines.contains("player 1 wins"));
        assertTrue(lines.contains("player 1 exits"));
        assertTrue(lines.contains("player 1 final hand: [" + new Card(2) + ", " + new Card(2) + ", " + new Card(2) + ", " + new Card(2) + "]"));
    }

    @Test
    void testAddInitialCards(){
        // Test that the cards are added correctly
        assertEquals(initialCards, player.getHand());
    }

    @Test
    void testPlayerDrawsCardFromLeftDeck() {
        // Add a card to the right deck
        leftDeck.addCard(new Card(5));

        // Simulate the player drawing a card from the right deck
        Card drawnCard = player.drawCard();

        // Validate the drawn card
        assertNotNull(drawnCard);
        assertEquals(5, drawnCard.getValue());

        // Ensure the right deck is empty after the draw
        assertTrue(leftDeck.isEmpty());
    }

    @Test
    void testPlayerDiscardsCardToRightDeck() {
        // Simulate the player discarding a card
        player.discardCard(cardToDiscard);

        // Check that the card is in the left deck
        assertFalse(rightDeck.isEmpty());
        assertEquals(1, rightDeck.drawCard().getValue());
    }

    @Test
    void testPlayerWinningCondition() {
        // Update the player's hand to a winning hand
        player.clearHand();
        player.addInitialCards(new Card(2));
        player.addInitialCards(new Card(2));
        player.addInitialCards(new Card(2));
        player.addInitialCards(new Card(2));

        // Validate the winning condition
        assertTrue(player.hasWinningHand());
    }

    @Test
    void testPlayerDoesNotWinWithNonUniformCards() {
        // Keep the hand as initialized
        assertFalse(player.hasWinningHand());
    }

    @Test
    void testPlayerThrowsExceptionForInvalidCardDiscard() {
        // Try to discard a card not in hand
        Card invalidCard = new Card(99);
        Exception exception = assertThrows(IllegalArgumentException.class, () -> player.discardCard(invalidCard));

        // Validate the exception message
        assertEquals("Card is not in hand", exception.getMessage());
    }

    @Test
    void testRunMethodLeadsToWin() throws InterruptedException {
        // Add cards to decks
        leftDeck.addCard(new Card(1));
        leftDeck.addCard(new Card(1));
        leftDeck.addCard(new Card(1));
        leftDeck.addCard(new Card(1));

        Thread playerThread = new Thread(player);
        playerThread.start();
        playerThread.join();

        // Check if the player won the game
        assertTrue(cardgame.getGameWon());
    }

    @Test
    void testInitialWinningHand() throws InterruptedException {
        // Initialise the player's hand with some cards
        initialCards2 = new ArrayList<>();
        initialCards2.add(new Card(2));
        initialCards2.add(new Card(2));
        initialCards2.add(new Card(2));
        initialCards2.add(new Card(2));

        // Create the player
        player2 = new Player(2, leftDeck, rightDeck);
        player2.setMain(cardgame);

        // Add the initial cards to the player's hand
        initialCards2.forEach(player2::addInitialCards);

        Thread playerThread = new Thread(player2);
        playerThread.start();
        playerThread.join();

        // Check if the player won the game
        assertTrue(cardgame.getGameWon());
    }

}
