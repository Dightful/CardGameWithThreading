package org.example;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class TestCardDeck {

    private CardDeck cardDeck;
    private Card card;

    @BeforeEach
    void setUp() {
        cardDeck = new CardDeck();
        // Card value can be any non-negative integer, here example is 1
        card = new Card(1);
    }

    @Test
    void testAddCard() {
        cardDeck.addCard(card);
        // Checks if the card deck has a card in it
        assertFalse(cardDeck.isEmpty(), "Deck should not be empty after adding a card");
    }

    @Test
    void testDrawCard() {
        cardDeck.addCard(card);
        Card drawnCard = cardDeck.drawCard();
        // Checks if the card drawn has the same value that was put in the deck
        assertEquals(card, drawnCard, "The drawn card should be the same as the added card");
        // Checks if the card deck is empty after removing the card
        assertTrue(cardDeck.isEmpty(), "Deck should be empty after drawing the only card");
    }

    @Test
    void testIsEmpty() {
        // Checks if the card deck is empty to begin with
        assertTrue(cardDeck.isEmpty(), "New deck should be empty");
        cardDeck.addCard(card);
        // Checks if the card deck has a card
        assertFalse(cardDeck.isEmpty(), "Deck should not be empty after adding a card");
        cardDeck.drawCard();
        // Checks if the card deck is empty after the card if removed
        assertTrue(cardDeck.isEmpty(), "Deck should be empty after all cards are drawn");
    }

    @Test
    void testToString() {
        String emptyDeckString = cardDeck.toString();
        // Tests an empty deck for it to return an empty []
        assertEquals("[]", emptyDeckString, "Empty deck should be represented as []");
        cardDeck.addCard(card);
        String nonEmptyDeckString = cardDeck.toString();
        // Checks for the deck to be return something in the []
        assertNotEquals("[]", nonEmptyDeckString, "Non-empty deck should not be represented as []");
    }

    @Test
    void testAddMultipleCards() {
        // Add multiple cards to the deck
        Card card1 = new Card(2);
        Card card2 = new Card(3);
        cardDeck.addCard(card);
        cardDeck.addCard(card1);
        cardDeck.addCard(card2);
        // Checks the deck if there is the multiple cards in order
        assertEquals("[1, 2, 3]", cardDeck.toString(), "Deck should contain the cards in added order");
    }

    @Test
    void testAddNullCard() {
        // Checks if an exception is thrown for null
        assertThrows(NullPointerException.class, () -> cardDeck.addCard(null), "Adding a null card should throw a NullPointerException");
    }

    @Test
    void testDrawAllCards() {
        // Adds 10 cards to the deck
        for (int i = 0; i < 10; i++) {
            cardDeck.addCard(new Card(i));
        }
        // Draws all 10 cards
        for (int i = 0; i < 10; i++) {
            Card drawnCard = cardDeck.drawCard();
            // Checks if all cards are drawn in order
            assertEquals(i, drawnCard.getValue(), "Drawn cards should be in the order they were added");
        }
        // Checks if deck is empty after all cards are drawn
        assertTrue(cardDeck.isEmpty(), "Deck should be empty after all cards are drawn");
    }

    @Test
    void testSequentialAddAndDraw() {
        // Adds a card
        cardDeck.addCard(new Card(1));
        Card drawnCard1 = cardDeck.drawCard();
        // Checks if the card drawn is the card added
        assertEquals(1, drawnCard1.getValue(), "First draw should return the first added card");

        // Adds two cards
        cardDeck.addCard(new Card(2));
        cardDeck.addCard(new Card(3));

        Card drawnCard2 = cardDeck.drawCard();
        // Checks if the second card drawn is the second card added
        assertEquals(2, drawnCard2.getValue(), "Second draw should return the second added card");

        Card drawnCard3 = cardDeck.drawCard();
        // Checks if the third card drawn is the third cards added
        assertEquals(3, drawnCard3.getValue(), "Third draw should return the third added card");

        // Checks if the deck is empty after all the cards are drawn
        assertTrue(cardDeck.isEmpty(), "Deck should be empty after all sequentially added cards are drawn");
    }

    @Test
    void testLargeNumberOfCards() {
        // Adds a large number of cards
        int largeNum = 1000;
        for (int i = 0; i < largeNum; i++) {
            cardDeck.addCard(new Card(i));
        }
        // Checks if the deck has cards in it after all the cards are added
        assertFalse(cardDeck.isEmpty(), "Deck should not be empty after adding a large number of cards");

        // Removes all the cards
        for (int i = 0; i < largeNum; i++) {
            Card drawnCard = cardDeck.drawCard();
            // Checks if the cards are removed the same order that they were added
            assertEquals(i, drawnCard.getValue(), "Drawn cards should be in the order they were added");
        }
        // Check if the deck is empty after all the cards are removed
        assertTrue(cardDeck.isEmpty(), "Deck should be empty after drawing all cards");
    }
}
